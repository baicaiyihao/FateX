import { LoadingButton } from "@mui/lab";
import {
  Divider,
  Container,
  Card,
  CardContent,
  Stack,
  Typography,
  Box,
  Chip,
  Grid,
  Fade,
  Zoom,
  Snackbar,
  Tooltip,
  IconButton,
} from "@mui/material";
import HelpOutlineIcon from "@mui/icons-material/HelpOutline";
import {
  useCurrentAddress,
  SessionKeyGuard,
  useCurrentSession,
  useRoochClient,
} from "@roochnetwork/rooch-sdk-kit";
import { useState, useEffect } from "react";
import { Raffle } from "../componnents/raffle";
import { styled } from "@mui/material/styles";
import Confetti from "react-confetti";
import useWindowSize from "react-use/lib/useWindowSize";
import { Layout } from "../components/shared/layout";
import { formatBalance, getCoinDecimals } from "../utils/coinUtils";
import { FATETYPE } from "../config/constants";

// Custom card style
const StyledCard = styled(Card)`
  border-radius: 16px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
  transition:
    transform 0.3s ease,
    box-shadow 0.3s ease;
  overflow: hidden;
  background-color: rgba(255, 255, 255, 0.9);

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
  }
`;

// Custom button style
const StyledButton = styled(LoadingButton)`
  border-radius: 50px;
  padding: 12px 32px;
  font-weight: bold;
  text-transform: none;
  font-size: 1rem;
  transition: transform 0.2s ease;

  &:hover:not(:disabled) {
    transform: scale(1.05);
  }
`;

function RafflePage() {
  const currentAddress = useCurrentAddress();
  const currentSession = useCurrentSession();
  const [loading, setLoading] = useState(false);
  const [raffleConfig, setRaffleConfig] = useState<any>(null);
  const [raffleRecord, setRaffleRecord] = useState<any>(null);
  const [justRaffled, setJustRaffled] = useState(false);
  const [fateBalance, setFateBalance] = useState<string>("0");
  const { width, height } = useWindowSize();
  const client = useRoochClient();


  // Snackbar Áä∂ÊÄÅ
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [snackbarSeverity, setSnackbarSeverity] = useState<"success" | "error">(
    "success"
  );

  const {
    GetCheckInRaffleByFate,
    ClaimMaxRaffle,
    QueryCheckInRaffle,
    QueryCheckInRaffleRecord,
  } = Raffle();

  useEffect(() => {
    if (currentAddress && client) {
      fetchData();
      fetchFateBalance();
    }
  }, [currentAddress]);

  const fetchData = async () => {
    try {
      const raffleConfigData = await QueryCheckInRaffle();
      setRaffleConfig(raffleConfigData);
      console.log("Â•ñÊ±†ÈÖçÁΩÆ:", raffleConfigData);

      const raffleRecordData = await QueryCheckInRaffleRecord();
      console.log("ÊäΩÂ•ñËÆ∞ÂΩï:", raffleRecordData);
      setRaffleRecord(raffleRecordData);
    } catch (error) {
      console.error("Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•:", error);
    }
  };

  const fetchFateBalance = async () => {
    if (!currentAddress || !client) return;

    try {
      console.log("ÂºÄÂßãËé∑Âèñ‰ΩôÈ¢ù...");
      const decimals = await getCoinDecimals(client, FATETYPE);
      console.log("Ëé∑ÂèñÂà∞ decimals:", decimals);

      const balance = (await client.getBalance({
        owner: currentAddress?.genRoochAddress().toHexAddress() || "",
        coinType: FATETYPE,
      })) as any;
      console.log("ÂéüÂßã‰ΩôÈ¢ùÊï∞ÊçÆ:", balance);

      if (!balance?.balance) {
        console.warn("‰ΩôÈ¢ùËøîÂõûÂÄºÂºÇÂ∏∏:", balance);
        setFateBalance("0");
        return;
      }
      const formattedBalance = formatBalance(balance.balance, decimals);
      console.log("Ê†ºÂºèÂåñÂêéÁöÑ‰ΩôÈ¢ù:", formattedBalance);
      setFateBalance(formatBalance(balance?.balance, decimals));
    } catch (error) {
      console.error("Ëé∑Âèñ FATE ‰ΩôÈ¢ùÂ§±Ë¥•:", error);
      setFateBalance("0");
    }
  };

  const getPrizeLevel = (result: number, config: any) => {
    if (!result || !config) return null;

    const resultNum = Number(result);
    const grandWeight = Number(config.grand_prize_weight);
    const secondWeight = Number(config.second_prize_weight);
    const thirdWeight = Number(config.third_prize_weight);

    const totalWeight = grandWeight + secondWeight + thirdWeight;
    const normalizedResult =
      (resultNum / Number(config.max_raffle_count_weight)) * totalWeight;

    if (normalizedResult <= grandWeight) {
      return {
        level: 1,
        name: "ÁâπÁ≠âÂ•ñ",
        duration: Number(config.grand_prize_duration),
      };
    } else if (normalizedResult <= grandWeight + secondWeight) {
      return {
        level: 2,
        name: "‰∫åÁ≠âÂ•ñ",
        duration: Number(config.second_prize_duration),
      };
    } else {
      return {
        level: 3,
        name: "‰∏âÁ≠âÂ•ñ",
        duration: Number(config.third_prize_duration),
      };
    }
  };

  

  const handleFateRaffle = async () => {
    if (loading) return;

    if (parseInt(raffleRecord?.raffle_count || "0") >= 50) {
      setSnackbarMessage("Â∑≤ËææÂà∞ÊúÄÂ§ßÊäΩÂ•ñÊ¨°Êï∞ÈôêÂà∂Ôºà50Ê¨°Ôºâ");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
      return;
    }

    setLoading(true);
    try {
      const result = await GetCheckInRaffleByFate();
      console.log("FateÊäΩÂ•ñÁªìÊûú:", result);

      if (result === undefined) {
        setSnackbarMessage("Fate‰ΩôÈ¢ù‰∏çË∂≥ÊàñÂ∑≤Âà∞ÊäΩÂèñ‰∏äÈôê");
        setSnackbarSeverity("error");
        setSnackbarOpen(true);
        return;
      }

      const prizeLevel = getPrizeLevel(Number(result), raffleConfig);

      if (prizeLevel) {
        setSnackbarMessage(
          `ÊÅ≠ÂñúËé∑Âæó${prizeLevel.name}ÔºÅËé∑Âèñ${prizeLevel.duration}FATE`
        );
        setSnackbarSeverity("success");
        setSnackbarOpen(true);
      }
      await fetchData();
      setJustRaffled(true);
      setTimeout(() => setJustRaffled(false), 3000);
    } catch (error) {
      console.error("FateÊäΩÂ•ñÂ§±Ë¥•:", error);
      setSnackbarMessage("ÊäΩÂ•ñÂ§±Ë¥•ÔºåËØ∑ÈáçËØï");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    } finally {
      setLoading(false);
    }
  };

  const handleClaimMaxRaffle = async () => {
    if (loading) return;

    setLoading(true);
    try {
      await ClaimMaxRaffle();
      await fetchData();
      setJustRaffled(true);
      setSnackbarMessage("È¢ÜÂèñÊàêÂäü");
      setSnackbarSeverity("success");
      setSnackbarOpen(true);
      setTimeout(() => setJustRaffled(false), 3000);
    } catch (error) {
      console.error("È¢ÜÂèñ‰øùÂ∫ïÂ§±Ë¥•:", error);
      setSnackbarMessage("È¢ÜÂèñ‰øùÂ∫ïÂ§±Ë¥•ÔºåËØ∑ÈáçËØï");
      setSnackbarSeverity("error");
      setSnackbarOpen(true);
    } finally {
      setLoading(false);
    }
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  return (
    <Layout>
      <Container className="app-container">
        {justRaffled && (
          <Confetti
            width={width}
            height={height}
            recycle={false}
            numberOfPieces={500}
            gravity={0.1}
            onConfettiComplete={() => setJustRaffled(false)}
          />
        )}

        <Stack
          className="font-sans min-w-[1024px]"
          direction="column"
          sx={{
            minHeight: "100vh",
            padding: "2rem",
          }}
        >
          <Stack
            direction="row"
            justifyContent="center"
            alignItems="center"
            className="mb-8"
          >
            <Typography variant="h4" className="font-bold">
              ÊäΩÂ•ñÊ¥ªÂä®
            </Typography>
            <Box width={100} />
          </Stack>

          <Grid container spacing={4}>
            {/* Raffle Status Card */}
            <Grid item xs={12} md={6}>
              <StyledCard elevation={3} className="mb-8">
                <CardContent>
                  <Typography
                    variant="h5"
                    className="mb-4 font-bold"
                    sx={{ display: "flex", alignItems: "center" }}
                  >
                    <Box component="span" sx={{ mr: 1, fontSize: "1.5rem" }}>
                      üé≤
                    </Box>
                    ÊäΩÂ•ñÁä∂ÊÄÅ
                  </Typography>

                  {raffleRecord ? (
                    <Stack spacing={2}>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Box sx={{ display: "flex", alignItems: "center" }}>
                          <Typography>‰ªäÊó•ÊäΩÂ•ñÊ¨°Êï∞:</Typography>
                          <Tooltip
                            title="ÊØèÊó•ÊäΩÂ•ñ‰∏äÈôêÊ¨°Êï∞‰∏∫50Ê¨°, Ê¨°Êó•È¶ñÊ¨°ÊäΩÂ•ñÂêéÂà∑Êñ∞Ê¨°Êï∞„ÄÇ"
                            arrow
                            placement="top"
                          >
                            <IconButton size="small" sx={{ ml: 1 }}>
                              <HelpOutlineIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </Box>
                        <Zoom in={true} style={{ transitionDelay: "100ms" }}>
                          <Chip
                            label={raffleRecord?.daily_raffle_count || 0}
                            color="secondary"
                            sx={{ fontWeight: "bold" }}
                          />
                        </Zoom>
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Box sx={{ display: "flex", alignItems: "center" }}>
                          <Typography>Á¥ØËÆ°Êú™È¢Ü‰øùÂ∫ïÊ¨°Êï∞:</Typography>
                          <Tooltip
                            title="ÊØèÁ¥ØËÆ°10Ê¨°ÊäΩÂ•ñÂèØÈ¢ÜÂèñ‰∏ÄÊ¨°‰øùÂ∫ïÂ•ñÂä±ÔºåÈ¢ÜÂèñÂêéÊ≠§Êï∞ÂÄº‰ºöÂáèÂ∞ë10"
                            arrow
                            placement="top"
                          >
                            <IconButton size="small" sx={{ ml: 1 }}>
                              <HelpOutlineIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </Box>
                        <Zoom in={true} style={{ transitionDelay: "200ms" }}>
                          <Chip
                            label={raffleRecord?.raffle_count || 0}
                            color="primary"
                            sx={{ fontWeight: "bold" }}
                          />
                        </Zoom>
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>Ë∑ù‰∏ãÊ¨°‰øùÂ∫ïËøòÈúÄ:</Typography>
                        <Zoom in={true} style={{ transitionDelay: "300ms" }}>
                          <Chip
                            label={
                              (raffleRecord?.raffle_count || 0) % 10 === 0
                                ? 10
                                : 10 - ((raffleRecord?.raffle_count || 0) % 10)
                            }
                            color="warning"
                            sx={{ fontWeight: "bold" }}
                          />
                        </Zoom>
                      </Box>
                    </Stack>
                  ) : (
                    <Typography>Êú™Êü•ËØ¢Âà∞ÊäΩÂ•ñ‰ø°ÊÅØÔºåËØ∑ÂÖàËøõË°åÊäΩÂ•ñ„ÄÇ</Typography>
                  )}
                </CardContent>
              </StyledCard>
            </Grid>

            {/* Raffle Pool Card */}
            <Grid item xs={12} md={6}>
              <StyledCard elevation={3} className="mb-8">
                <CardContent>
                  <Typography
                    variant="h5"
                    className="mb-4 font-bold"
                    sx={{ display: "flex", alignItems: "center" }}
                  >
                    <Box component="span" sx={{ mr: 1, fontSize: "1.5rem" }}>
                      üèÜ
                    </Box>
                    Â•ñÊ±†‰ø°ÊÅØ
                  </Typography>
                  {raffleConfig ? (
                    <Stack spacing={2}>
                      <Typography
                        variant="subtitle1"
                        className="mb-2 font-bold"
                      >
                        Â•ñÂìÅËÆæÁΩÆ:
                      </Typography>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>ÁâπÁ≠âÂ•ñ:</Typography>
                        <Chip
                          label={`${raffleConfig?.grand_prize_duration?.toString() || "0"} FATE`}
                          color="primary"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>‰∫åÁ≠âÂ•ñ:</Typography>
                        <Chip
                          label={`${raffleConfig?.second_prize_duration?.toString() || "0"} FATE`}
                          color="success"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>‰∏âÁ≠âÂ•ñ:</Typography>
                        <Chip
                          label={`${raffleConfig?.third_prize_duration?.toString() || "0"} FATE`}
                          color="secondary"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>

                      <Divider sx={{ my: 2 }} />

                      <Typography
                        variant="subtitle1"
                        className="mb-2 font-bold"
                      >
                        ‰∏≠Â•ñÊ¶ÇÁéá:
                      </Typography>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>ÁâπÁ≠âÂ•ñÊ¶ÇÁéá:</Typography>
                        <Chip
                          label={`${raffleConfig?.grand_prize_weight?.toString() || "0"}%`}
                          color="primary"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>‰∫åÁ≠âÂ•ñÊ¶ÇÁéá:</Typography>
                        <Chip
                          label={`${raffleConfig?.second_prize_weight?.toString() || "0"}%`}
                          color="success"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Typography>‰∏âÁ≠âÂ•ñÊ¶ÇÁéá:</Typography>
                        <Chip
                          label={`${raffleConfig?.third_prize_weight?.toString() || "0"}%`}
                          color="secondary"
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                    </Stack>
                  ) : (
                    <Typography>--</Typography>
                  )}
                </CardContent>
              </StyledCard>
            </Grid>
          </Grid>

          <Stack
            direction="row"
            spacing={2}
            justifyContent="center"
            className="mt-4"
            style={{ marginTop: "30px" }}
          >
            <SessionKeyGuard onClick={handleFateRaffle}>
              <StyledButton
                variant="contained"
                color="secondary"
                size="large"
                loading={loading}
                startIcon={<span>‚ú®</span>}
              >
                FateÊäΩÂ•ñ
              </StyledButton>
            </SessionKeyGuard>

            <SessionKeyGuard onClick={handleClaimMaxRaffle}>
              <StyledButton
                variant="outlined"
                color="success"
                size="large"
                loading={loading}
                disabled={parseInt(raffleRecord?.raffle_count || "0") < 10}
                startIcon={<span>üèÖ</span>}
              >
                È¢ÜÂèñ‰øùÂ∫ïÂ•ñÂä±
              </StyledButton>
            </SessionKeyGuard>
          </Stack>
          {raffleConfig && (
            <Fade in={true}>
              <Typography
                variant="body2"
                color="text.secondary"
                sx={{ mt: 2, textAlign: "center" }}
              >
                ÂΩìÂâç FATE ‰ΩôÈ¢ù:{fateBalance}
                <br/>
                ÊäΩÂ•ñË¥πÁî®:{" "}
                {(
                  (Number(raffleConfig?.grand_prize_duration || 1000) * 5 +
                    Number(raffleConfig?.second_prize_duration || 500) * 25 +
                    Number(raffleConfig?.third_prize_duration || 150) * 70) /
                  100
                ).toFixed(2)}{" "}
                FATE
              </Typography>
            </Fade>
          )}

          {/* {parseInt(raffleRecord?.raffle_count || "0") < 10 && (
            <Fade in={true}>
              <Typography
                variant="body2"
                color="text.secondary"
                sx={{ mt: 2, textAlign: "center" }}
              >
                ÂÜçÊäΩ {10 - parseInt(raffleRecord?.raffle_count || "0")}{" "}
                Ê¨°Âç≥ÂèØÈ¢ÜÂèñ‰øùÂ∫ïÂ•ñÂä±ÔºÅ
              </Typography>
            </Fade>
          )} */}
          {/* {raffleRecord && (
            <Fade in={true}>
              <Typography
                variant="body2"
                color="text.secondary"
                sx={{ mt: 2, textAlign: "center" }}
              >
                {parseInt(raffleRecord?.raffle_count || "0") >= 50
                  ? "Â∑≤ËææÂà∞ÊúÄÂ§ßÊäΩÂ•ñÊ¨°Êï∞Ôºà50Ê¨°Ôºâ"
                  : `Ââ©‰ΩôÂèØÊäΩÂ•ñÊ¨°Êï∞Ôºö${
                      50 - parseInt(raffleRecord?.daily_raffle_count || "0")
                    }Ê¨°`}
              </Typography>
            </Fade>
          )} */}
        </Stack>

        <Snackbar
          open={snackbarOpen}
          autoHideDuration={5000}
          onClose={handleSnackbarClose}
          anchorOrigin={{ vertical: "top", horizontal: "center" }}
          message={snackbarMessage}
          sx={{
            "& .MuiSnackbarContent-root": {
              backgroundColor:
                snackbarSeverity === "success" ? "#2e7d32" : "#d32f2f",
              color: "#fff",
            },
          }}
        />
      </Container>
    </Layout>
  );
}

export default RafflePage;