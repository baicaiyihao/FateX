import { Container } from "@radix-ui/themes";
import "./styles.css"; 
import {  Stack } from "@mui/material"; 
import { AnimatedBackground} from "./components/shared/animation_components"
import { NavBar } from './components/shared/nav_bar';
import { StakeByGrowVotes } from './componnents/stake_by_grow_votes';
import {
  useCurrentSession,
  useRoochClientQuery,
  useRoochClient,
  useCurrentAddress,
} from "@roochnetwork/rooch-sdk-kit";

import { useEffect, useState } from "react";
import { GridNavigation, NavigationCard } from './componnents/grid_navigation'; 
import { CheckIn } from './componnents/check_in';
function App() {
  const sessionKey = useCurrentSession();
  const client = useRoochClient();
  const currentAddress = useCurrentAddress();

 
  // const [loading, setLoading] = useState(false);
  // const devCounterAddress = useNetworkVariable("testnet");
  // const devCounterModule = `${devCounterAddress}::`;
  // let { data, error, isPending, refetch } = useRoochClientQuery(
  //   "executeViewFunction",
  //   {
  //     target: `${devCounterModule}::value`,
  //   },
  // );

  const {
    QueryDailyCheckInConfig,
    QueryCheckInRecord,
  } = CheckIn();

  const [checkInData, setCheckInData] = useState<any>(null);
  const [checkInConfig, setCheckInConfig] = useState<any>(null);

   // Ëé∑ÂèñÁ≠æÂà∞Êï∞ÊçÆ
   useEffect(() => {
    const fetchCheckInData = async () => {
      if (currentAddress) {
        try {
          const record = await QueryCheckInRecord();
          setCheckInData(record);
          
          const config = await QueryDailyCheckInConfig();
          setCheckInConfig(config);
        } catch (error) {
          console.error("Ëé∑ÂèñÁ≠æÂà∞Êï∞ÊçÆÂ§±Ë¥•:", error);
        }
      }
    };
    
    fetchCheckInData();
  }, [currentAddress]);


  const [poolInfo, setPoolInfo] = useState<any>(null);
  const [timeRemaining, setTimeRemaining] = useState<string>('');

  const {
    QueryStakePoolInfo,
  } = StakeByGrowVotes();

  useEffect(() => {
    const fetchPoolInfo = async () => {
        try {
          const info = await QueryStakePoolInfo();
          console.log('Ë¥®ÊäºÊ±†‰ø°ÊÅØ:', info); // Ê∑ªÂä†Êó•ÂøóÊü•ÁúãÊï∞ÊçÆ
          setPoolInfo(info);
        } catch (error) {
          console.error("Ëé∑ÂèñË¥®ÊäºÊ±†‰ø°ÊÅØÂ§±Ë¥•:", error);
        }
   
    };
    
    fetchPoolInfo();
  }, [currentAddress]);

  useEffect(() => {
    if (!poolInfo?.end_time) return;
    const updateCountdown = () => {
      const now = Math.floor(Date.now() / 1000);
      const endTime = parseInt(poolInfo.end_time);
      const diff = endTime - now;
      if (diff <= 0) {
        setTimeRemaining('Ê¥ªÂä®Â∑≤ÁªìÊùü');
        return;
      }
      const days = Math.floor(diff / (24 * 60 * 60));
      const hours = Math.floor((diff % (24 * 60 * 60)) / (60 * 60));
      const minutes = Math.floor((diff % (60 * 60)) / 60);
      setTimeRemaining(`${days}Â§© ${hours}Êó∂ ${minutes}ÂàÜ`);
    };
    updateCountdown();
    const timer = setInterval(updateCountdown, 60000); // ÊØèÂàÜÈíüÊõ¥Êñ∞
    return () => clearInterval(timer);
  }, [poolInfo]);

    // Ê∑ªÂä†ÂØºËà™Âç°ÁâáÊï∞ÊçÆ
    const navigationCards: NavigationCard[] = [
      {
        title: "Ë¥®ÊäºÊìç‰Ωú",
        description: poolInfo ? 
        `ÁÆ°ÁêÜÊÇ®ÁöÑË¥®Êäº„ÄÅËß£Èô§Ë¥®ÊäºÂíåÈ¢ÜÂèñÂ•ñÂä±Á≠âÊìç‰Ωú\n ÊÄªÂèØÊåñÂèñ: ${poolInfo.total_fate_supply || 0} FATE\nÂâ©‰ΩôÊó∂Èó¥: ${timeRemaining}` : "ÁÆ°ÁêÜÊÇ®ÁöÑË¥®Êäº„ÄÅËß£Èô§Ë¥®ÊäºÂíåÈ¢ÜÂèñÂ•ñÂä±Á≠âÊìç‰Ωú„ÄÇ",
        icon: "üí∞",
        onClick: () => window.location.href = '/stake',
        width:{lg:8},extraContent: poolInfo ? {
          stats: [
            {
              label: "ÊÄªË¥®ÊäºÊï∞Èáè",
              value: `${poolInfo.total_staked_votes || 0} Á•®`,
              icon: "üìä"
            },
            {
              label: "ÊØèÊó•‰∫ßÂá∫",
              value: `${poolInfo.fate_per_day || 0} FATE`,
              icon: "üìà"
            }
          ],
          countdown: timeRemaining
        } : undefined
      },
      {
        title: "ÊØèÊó•Á≠æÂà∞",
        description: checkInData 
          ? `Â∑≤ËøûÁª≠Á≠æÂà∞ ${checkInData.continue_days} Â§©ÔºåÊÄªËÆ° ${checkInData.total_sign_in_days} Â§©` 
          : "ËøõË°åÊØèÊó•Á≠æÂà∞Âπ∂Êü•ÁúãÁ≠æÂà∞ËÆ∞ÂΩïÂíåÈÖçÁΩÆ„ÄÇ",
        icon: "üìÖ",
        onClick: () => window.location.href = '/check-in',
        width: { lg: 4 },
        extraContent: checkInData && checkInConfig ? {
          continueDays: checkInData.continue_days,
          totalDays: checkInData.total_sign_in_days,
          nextReward: checkInConfig.daily_rewards[Math.min(checkInData.continue_days, checkInConfig.daily_rewards.length - 1)],
          isCheckedInToday: new Date(Number(checkInData.last_sign_in_timestamp) * 1000).toDateString() === new Date().toDateString()
        } : undefined
        ,
      },
      {
        title: "ÊäΩÂ•ñÁ≥ªÁªü",
        description: "ÂèÇ‰∏éÊäΩÂ•ñÊ¥ªÂä®Âπ∂È¢ÜÂèñÂ•ñÂä±„ÄÇ",
        icon: "üé≤",
        onClick: () => window.location.href = '/raffle',
        width: { lg: 4} 
      },
      {
        title: "Â∏ÇÂú∫‰∫§Êòì",
        description: "ËøõË°åÊîØ‰ªòÂíåÊü•ËØ¢‰ª∑Ê†ºËÆ∞ÂΩï„ÄÇ",
        icon: "üõí",
        onClick: () => window.location.href = '/leaderboard',
        width: { lg: 8 } 
      }
    ];

  return (
    <>
      <AnimatedBackground />
      <NavBar />
      <Container
       className="app-container"  style={{ maxWidth: '100%', padding: '0 24px',position:'relative',zIndex: 1,
        backdropFilter: 'blur(10px)',
        backgroundColor: 'rgba(255, 255, 255, 0.3)', transition: 'backdrop-filter 0.3s ease'}}>
        <Stack 
     direction="column-reverse"
     spacing={2}
     sx={{
       justifyContent: "normal",
       alignItems: "stretch",
       width: '100%',
       position: 'relative',
       overflow: 'visible',
       padding: '0 16px',
     }}
    >
      <div className="navigation-wrapper" style={{ width: '100%' }}>
        <GridNavigation cards={navigationCards} defaultHeight="550px" fullWidth={false} />
      </div>
    </Stack>
      </Container>
    </>
  );
}

export default App;
